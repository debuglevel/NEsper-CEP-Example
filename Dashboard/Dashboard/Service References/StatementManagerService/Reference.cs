//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.17626
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CEP.Dashboard.StatementManagerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StatementManagerService.IStatementManagerService")]
    public interface IStatementManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/CreateStatement", ReplyAction="http://tempuri.org/IStatementManagerService/CreateStatementResponse")]
        bool CreateStatement(string name, string statement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/CreateStatement", ReplyAction="http://tempuri.org/IStatementManagerService/CreateStatementResponse")]
        System.Threading.Tasks.Task<bool> CreateStatementAsync(string name, string statement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/GetStatements", ReplyAction="http://tempuri.org/IStatementManagerService/GetStatementsResponse")]
        System.Collections.Generic.Dictionary<string, string> GetStatements();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/GetStatements", ReplyAction="http://tempuri.org/IStatementManagerService/GetStatementsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetStatementsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StopStatement", ReplyAction="http://tempuri.org/IStatementManagerService/StopStatementResponse")]
        void StopStatement(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StopStatement", ReplyAction="http://tempuri.org/IStatementManagerService/StopStatementResponse")]
        System.Threading.Tasks.Task StopStatementAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StartStatement", ReplyAction="http://tempuri.org/IStatementManagerService/StartStatementResponse")]
        void StartStatement(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StartStatement", ReplyAction="http://tempuri.org/IStatementManagerService/StartStatementResponse")]
        System.Threading.Tasks.Task StartStatementAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StopAllStatements", ReplyAction="http://tempuri.org/IStatementManagerService/StopAllStatementsResponse")]
        void StopAllStatements();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StopAllStatements", ReplyAction="http://tempuri.org/IStatementManagerService/StopAllStatementsResponse")]
        System.Threading.Tasks.Task StopAllStatementsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StartAllStatements", ReplyAction="http://tempuri.org/IStatementManagerService/StartAllStatementsResponse")]
        void StartAllStatements();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatementManagerService/StartAllStatements", ReplyAction="http://tempuri.org/IStatementManagerService/StartAllStatementsResponse")]
        System.Threading.Tasks.Task StartAllStatementsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStatementManagerServiceChannel : CEP.Dashboard.StatementManagerService.IStatementManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatementManagerServiceClient : System.ServiceModel.ClientBase<CEP.Dashboard.StatementManagerService.IStatementManagerService>, CEP.Dashboard.StatementManagerService.IStatementManagerService {
        
        public StatementManagerServiceClient() {
        }
        
        public StatementManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StatementManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatementManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatementManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateStatement(string name, string statement) {
            return base.Channel.CreateStatement(name, statement);
        }
        
        public System.Threading.Tasks.Task<bool> CreateStatementAsync(string name, string statement) {
            return base.Channel.CreateStatementAsync(name, statement);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetStatements() {
            return base.Channel.GetStatements();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetStatementsAsync() {
            return base.Channel.GetStatementsAsync();
        }
        
        public void StopStatement(string name) {
            base.Channel.StopStatement(name);
        }
        
        public System.Threading.Tasks.Task StopStatementAsync(string name) {
            return base.Channel.StopStatementAsync(name);
        }
        
        public void StartStatement(string name) {
            base.Channel.StartStatement(name);
        }
        
        public System.Threading.Tasks.Task StartStatementAsync(string name) {
            return base.Channel.StartStatementAsync(name);
        }
        
        public void StopAllStatements() {
            base.Channel.StopAllStatements();
        }
        
        public System.Threading.Tasks.Task StopAllStatementsAsync() {
            return base.Channel.StopAllStatementsAsync();
        }
        
        public void StartAllStatements() {
            base.Channel.StartAllStatements();
        }
        
        public System.Threading.Tasks.Task StartAllStatementsAsync() {
            return base.Channel.StartAllStatementsAsync();
        }
    }
}
